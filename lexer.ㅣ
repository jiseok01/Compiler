%{
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define MAX_SYMBOLS 100
#define MAX_NAME_LENGTH 50

typedef enum { PNAME, PROC, FUNC, INT, LONG } typeKind;

struct symbolTable {
    char name[MAX_NAME_LENGTH];
    typeKind type;
    int init; 
    int addr; 
} symtab[MAX_SYMBOLS];

int symbolCount = 0;

int addSymbol(const char *name, typeKind type) {
    
    if (symbolCount < MAX_SYMBOLS) {
        strcpy(symtab[symbolCount].name, name);
        symtab[symbolCount].type = type;
        symtab[symbolCount].init = 0; 
        symtab[symbolCount].addr = symbolCount; 
        return symbolCount++; 
    }
    return -1; 
}

int findSymbol(const char *name) {
    for (int i = 0; i < symbolCount; i++) {
        if (strcmp(symtab[i].name, name) == 0) {
            return i; 
        }
    }
    return -1;
}
%}

%s CMT
%%

"/*"	BEGIN CMT;
<CMT>"*/"	BEGIN 0;
<CMT>[a-zA-Z]*   ;
<CMT>.	;
<CMT>\n	;

program	printf("TPROGRAM");
main	printf("TMAIN");
proc	printf("TPROC");
func	printf("TFUNC");
returns	printf("TRETURNS");
var	printf("TVAR");
integer	printf("TINT");
long	printf("TLONG");
if	printf("TIF");
then	printf("TTHEN");
else	printf("TELSE");
while	printf("TWHILE");
for	printf("TFOR");
to	printf("TTO");
call	printf("TCALL");
return	printf("TRETURN");
begin	printf("TBEGIN");
end	printf("TEND");

"="	printf("TASS");
"&"	printf("TAND");
"|"	printf("TOR");
"!"	printf("TNOT");
"<"	printf("TLT");
"<="	printf("TLE");
">"	printf("TGT");
">="	printf("TGE");
"!="	printf("TNE");
"+"	printf("TPLUS");
"-"	printf("TMINUS");
"*"	printf("TMUL");
"/"	printf("TDIV");

[a-zA-Z_][a-zA-Z0-9_]*	{
    int index = findSymbol(yytext);
    if (index == -1) { 
        index = addSymbol(yytext, PNAME); 
    } printf("TWORD (index: %d)", index);
  	}

[0-9]*	printf("TNUMBER %s", yytext);

.	ECHO;

%%
int main() {
	yylex();
}